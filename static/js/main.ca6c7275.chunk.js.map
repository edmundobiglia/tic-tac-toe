{"version":3,"sources":["components/XSvg.js","components/OSvg.js","components/Square.js","components/ScoreBoard.js","components/TicTacToe.js","GlobalStyle.js","App.js","index.js"],"names":["XSvg","viewBox","fill","xmlns","x1","y1","x2","y2","strokeWidth","OSvg","cx","cy","r","SquareContainer","styled","div","forwardRef","ref","square","handleMove","currentPlayer","gameEndSquareLetter","className","data-square","onMouseDown","e","ScoreBoardStyle","Column","Row","ScoreBoard","xScore","oScore","setXScore","setOScore","GridContainer","props","disable","Grid","defaultGrid","winningCombinations","TicTacToe","useState","setCurrentPlayer","xMoves","setXMoves","oMoves","setOMoves","totalMoves","setTotalMoves","winner","setWinner","gridSquares","setGridSquares","gridSquaresRef","useRef","endGame","timeout","setTimeout","useEffect","currentPlayerMoves","setCurrentPlayerScore","length","movesMatchAnyWinningCombination","map","winningCombination","every","winningMove","includes","squareBackgroundColorAnimationDelay","indexOfWinningCombination","indexOf","sort","forEach","indexOfWinningSquare","current","findIndex","gridSquare","dataset","classList","add","squareIndex","remove","previousScore","previousPlayer","clickedSquare","target","previousMoves","boardAfterGameEnd","Object","keys","squareKey","key","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca6c7275.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst XSvg = () => (\r\n    <svg viewBox=\"0 0 75 77\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <line x1=\"1.83314\" y1=\"73.311\" x2=\"73.5146\" y2=\"1.62961\" strokeWidth=\"3\" />\r\n        <line x1=\"73.5145\" y1=\"75.4323\" x2=\"1.83312\" y2=\"3.75093\" strokeWidth=\"3\" />\r\n    </svg>\r\n);\r\n\r\nexport default XSvg;\r\n","import React from \"react\";\r\n\r\nconst OSvg = () => (\r\n    <svg viewBox=\"0 0 73 73\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <circle cx=\"36.2036\" cy=\"36.531\" r=\"34.3407\" strokeWidth=\"3\" />\r\n    </svg>\r\n);\r\n\r\nexport default OSvg;\r\n","import React, { forwardRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport XSvg from \"./XSvg\";\r\nimport OSvg from \"./OSvg\";\r\n\r\nconst SquareContainer = styled.div`\r\n    align-items: center;\r\n    background: none;\r\n    color: #fff;\r\n    display: flex;\r\n    font-size: 60px;\r\n    justify-content: center;\r\n    transition: background 100ms ease;\r\n    animation: fadeIn 100ms ease-out;\r\n\r\n    svg,\r\n    span {\r\n        animation: fadeIn 100ms ease-out;\r\n    }\r\n\r\n    &:nth-child(2),\r\n    &:nth-child(8) {\r\n        border-left: 1.5px solid #fff;\r\n        border-right: 1.5px solid #fff;\r\n    }\r\n\r\n    &:nth-child(4),\r\n    &:nth-child(6) {\r\n        border-bottom: 1.5px solid #fff;\r\n        border-top: 1.5px solid #fff;\r\n    }\r\n\r\n    &:nth-child(5) {\r\n        border: 1.5px solid #fff;\r\n    }\r\n\r\n    @keyframes fadeIn {\r\n        0% {\r\n            opacity: 0;\r\n        }\r\n        100% {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Square = ({ square, handleMove, currentPlayer, gameEndSquareLetter }, ref) => {\r\n    return (\r\n        <SquareContainer\r\n            ref={ref}\r\n            className=\"square\"\r\n            data-square={square}\r\n            onMouseDown={(e) => {\r\n                if (!currentPlayer) {\r\n                    handleMove(e);\r\n                }\r\n            }}\r\n        >\r\n            {currentPlayer ? (\r\n                currentPlayer === \"x\" ? (\r\n                    <XSvg />\r\n                ) : (\r\n                    <OSvg />\r\n                )\r\n            ) : gameEndSquareLetter === \"X\" ? (\r\n                <XSvg />\r\n            ) : gameEndSquareLetter === \"O\" ? (\r\n                <OSvg />\r\n            ) : (\r\n                <span>{gameEndSquareLetter}</span>\r\n            )}\r\n        </SquareContainer>\r\n    );\r\n};\r\n\r\nexport default forwardRef(Square);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport XSvg from \"./XSvg\";\r\nimport OSvg from \"./OSvg\";\r\n\r\nconst ScoreBoardStyle = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 16px;\r\n    position: absolute;\r\n    top: 30px;\r\n    left: 30px;\r\n\r\n    &::after {\r\n        @media (min-width: 760px) {\r\n            opacity: 0;\r\n        }\r\n        transition: opacity 100ms ease, transform 100ms ease;\r\n        content: \"click to reset\";\r\n        font-size: 12px;\r\n        position: absolute;\r\n        top: 100%;\r\n        left: 0;\r\n        transform: translateY(-10%);\r\n        padding: 3px;\r\n        color: rgba(255, 255, 255, 0.8);\r\n        width: 120px;\r\n    }\r\n\r\n    @media (min-width: 760px) {\r\n        &:hover {\r\n            &::after {\r\n                opacity: 1;\r\n                transform: translateY(0%);\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst Column = styled.div`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 45px;\r\n\r\n    &:first-child {\r\n        border-right: 1px solid rgba(255, 255, 255, 0.9);\r\n    }\r\n`;\r\n\r\nconst Row = styled.div`\r\n    padding: 10px 15px;\r\n    color: #fff;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-weight: 300;\r\n\r\n    &:first-child {\r\n        border-bottom: 1px solid rgba(255, 255, 255, 0.9);\r\n        color: #ffa0a8;\r\n    }\r\n\r\n    svg {\r\n        width: 10px;\r\n        height: 10px;\r\n        margin: 5px 0;\r\n    }\r\n\r\n    svg line,\r\n    svg circle {\r\n        stroke: #ffa0a8;\r\n        stroke-width: 10px;\r\n    }\r\n`;\r\n\r\nconst ScoreBoard = ({ xScore, oScore, setXScore, setOScore }) => {\r\n    return (\r\n        <ScoreBoardStyle\r\n            onMouseDown={() => {\r\n                setXScore(0);\r\n                setOScore(0);\r\n            }}\r\n        >\r\n            <Column>\r\n                <Row>\r\n                    <XSvg />\r\n                </Row>\r\n                <Row>{xScore}</Row>\r\n            </Column>\r\n            <Column>\r\n                <Row>\r\n                    <OSvg />\r\n                </Row>\r\n                <Row>{oScore}</Row>\r\n            </Column>\r\n        </ScoreBoardStyle>\r\n    );\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Square from \"./Square\";\r\nimport ScoreBoard from \"./ScoreBoard\";\r\n\r\nconst GridContainer = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n    justify-content: center;\r\n    pointer-events: ${(props) => (props.disable ? \"none\" : \"auto\")};\r\n    width: 100vw;\r\n\r\n    svg {\r\n        height: 75px;\r\n        width: 75px;\r\n    }\r\n\r\n    svg line,\r\n    svg circle {\r\n        stroke: #ffa0a8;\r\n        transition: stroke 100ms ease;\r\n    }\r\n\r\n    .pink-background {\r\n        background: #ffa0a8;\r\n\r\n        svg line,\r\n        svg circle {\r\n            stroke: #002155;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Grid = styled.div`\r\n    display: grid;\r\n    grid-template-areas: \". . .\" \". . .\" \". . .\";\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-template-rows: 1fr 1fr 1fr;\r\n    height: 360px;\r\n    position: relative;\r\n    width: 360px;\r\n`;\r\n\r\nconst defaultGrid = {\r\n    \"0\": null,\r\n    \"1\": null,\r\n    \"2\": null,\r\n    \"3\": null,\r\n    \"4\": null,\r\n    \"5\": null,\r\n    \"6\": null,\r\n    \"7\": null,\r\n    \"8\": null,\r\n};\r\n\r\nconst winningCombinations = [\r\n    [\"0\", \"1\", \"2\"],\r\n    [\"3\", \"4\", \"5\"],\r\n    [\"6\", \"7\", \"8\"],\r\n    [\"0\", \"3\", \"6\"],\r\n    [\"1\", \"4\", \"7\"],\r\n    [\"2\", \"5\", \"8\"],\r\n    [\"0\", \"4\", \"8\"],\r\n    [\"6\", \"4\", \"2\"],\r\n];\r\n\r\nconst TicTacToe = () => {\r\n    const [currentPlayer, setCurrentPlayer] = useState(\"o\");\r\n    const [xMoves, setXMoves] = useState([]);\r\n    const [oMoves, setOMoves] = useState([]);\r\n    const [xScore, setXScore] = useState(0);\r\n    const [oScore, setOScore] = useState(0);\r\n    const [totalMoves, setTotalMoves] = useState(0);\r\n    const [winner, setWinner] = useState(null);\r\n    const [gridSquares, setGridSquares] = useState(defaultGrid);\r\n    const gridSquaresRef = useRef([]);\r\n\r\n    const endGame = (timeout) => {\r\n        setTotalMoves(0);\r\n        setCurrentPlayer(\"o\");\r\n        setXMoves([]);\r\n        setOMoves([]);\r\n        setTimeout(() => {\r\n            setGridSquares(defaultGrid);\r\n            setWinner(null);\r\n        }, timeout || 3000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const currentPlayerMoves = currentPlayer === \"x\" ? xMoves : oMoves;\r\n        const setCurrentPlayerScore = currentPlayer === \"x\" ? setXScore : setOScore;\r\n\r\n        if (currentPlayerMoves.length >= 3) {\r\n            const movesMatchAnyWinningCombination = winningCombinations.map((winningCombination) =>\r\n                winningCombination.every((winningMove) => currentPlayerMoves.includes(winningMove))\r\n            );\r\n\r\n            if (movesMatchAnyWinningCombination.includes(true)) {\r\n                /* \"setWinner(false)\" because setWinner will be set to the current\r\n                 *  winner ONLY AFTER animating the winning squares. */\r\n                setWinner(false);\r\n                endGame();\r\n\r\n                let squareBackgroundColorAnimationDelay = 0;\r\n\r\n                const indexOfWinningCombination = movesMatchAnyWinningCombination.indexOf(true);\r\n\r\n                let winningCombination = winningCombinations[indexOfWinningCombination].sort();\r\n\r\n                winningCombination.forEach((winningMove) => {\r\n                    const indexOfWinningSquare = gridSquaresRef.current.findIndex(\r\n                        (gridSquare) => gridSquare.dataset.square === winningMove\r\n                    );\r\n\r\n                    setTimeout(() => {\r\n                        gridSquaresRef.current[indexOfWinningSquare].classList.add(\"pink-background\");\r\n                    }, squareBackgroundColorAnimationDelay);\r\n\r\n                    squareBackgroundColorAnimationDelay += 50;\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    setWinner(currentPlayer);\r\n\r\n                    gridSquaresRef.current.forEach((square, squareIndex) => {\r\n                        if (squareIndex === 1) {\r\n                            square.classList.add(\"pink-background\");\r\n                        } else {\r\n                            square.classList.remove(\"pink-background\");\r\n                        }\r\n                    });\r\n                }, 1200);\r\n\r\n                setTimeout(() => {\r\n                    gridSquaresRef.current.forEach((square) => {\r\n                        square.classList.remove(\"pink-background\");\r\n                    });\r\n\r\n                    winningCombination = [];\r\n                }, 3000);\r\n\r\n                setCurrentPlayerScore((previousScore) => previousScore + 1);\r\n                return;\r\n            }\r\n\r\n            if (totalMoves === 9) {\r\n                setTimeout(() => {\r\n                    setWinner(\"nobody\");\r\n                }, 600);\r\n\r\n                endGame(2500);\r\n                return;\r\n            }\r\n        }\r\n\r\n        setCurrentPlayer((previousPlayer) => (previousPlayer === \"o\" ? \"x\" : \"o\"));\r\n    }, [xMoves, oMoves]); //eslint-disable-line\r\n\r\n    const handleMove = (e) => {\r\n        const clickedSquare = e.target.dataset.square;\r\n\r\n        setTotalMoves(totalMoves + 1);\r\n\r\n        setGridSquares({\r\n            ...gridSquares,\r\n            [clickedSquare]: currentPlayer,\r\n        });\r\n\r\n        const setCurrentPlayerMoves = currentPlayer === \"x\" ? setXMoves : setOMoves;\r\n\r\n        setCurrentPlayerMoves((previousMoves) => [...previousMoves, clickedSquare]);\r\n    };\r\n\r\n    const boardAfterGameEnd =\r\n        winner === \"nobody\"\r\n            ? [\"n\", \"o\", \"w\", \"i\", \"n\", \"n\", \"e\", \"r\", \"!\"]\r\n            : [\"\", winner === \"x\" ? \"X\" : \"O\", \"\", \"h\", \"a\", \"s\", \"w\", \"o\", \"n\"];\r\n\r\n    return (\r\n        <>\r\n            <ScoreBoard xScore={xScore} oScore={oScore} setXScore={setXScore} setOScore={setOScore} />\r\n\r\n            <GridContainer disable={winner !== null ? true : false}>\r\n                <Grid>\r\n                    {Object.keys(gridSquares).map((squareKey, squareIndex) => (\r\n                        <Square\r\n                            key={squareKey}\r\n                            ref={(square) => (gridSquaresRef.current[squareIndex] = square)}\r\n                            square={squareKey}\r\n                            handleMove={handleMove}\r\n                            currentPlayer={winner ? null : gridSquares[squareKey]}\r\n                            gameEndSquareLetter={winner ? boardAfterGameEnd[squareIndex] : null}\r\n                        />\r\n                    ))}\r\n                </Grid>\r\n            </GridContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TicTacToe;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    @import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@200&display=swap');\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        user-select: none;\r\n    }\r\n\r\n    body {\r\n        background: linear-gradient(135deg, #002155, #0156AD);\r\n        font-family: 'Source Code Pro', monospace;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport TicTacToe from \"./components/TicTacToe\";\nimport GlobalStyle from \"./GlobalStyle\";\n\nfunction App() {\n  return (\n    <>\n      <TicTacToe />\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}